worker_processes 1;

user  nginx;
# 'user nobody nobody;' for systems with 'nobody' as a group instead
error_log  /var/log/nginx/error.log warn;

pid        /var/run/nginx.pid;


events {
  worker_connections 1024; # increase if you have lots of clients
  accept_mutex off; # set to 'on' if nginx worker_processes > 1
  # 'use epoll;' to enable for Linux 2.6+
  # 'use kqueue;' to enable for FreeBSD, OSX
}




http {
        log_format  main        '$remote_addr - $remote_user [$time_local] "$request" '
                                '$status $body_bytes_sent "$http_referer" '
                                '"$http_user_agent" "$http_x_forwarded_for"';

        access_log /var/log/nginx/access.log main;

        include mime.types;
        # fallback in case we can't determine a type
        default_type application/octet-stream;
        sendfile on;


        upstream app_server {
                # fail_timeout=0 means we always retry an upstream even if it failed
                # to return a good HTTP response

                # for UNIX domain socket setups
                #server unix:/run/gunicorn.sock fail_timeout=0;
                # for a TCP configuration
                server pd2af_web:8080 fail_timeout=0;
        }


        server_tokens off;
        add_header X-Frame-Options SAMEORIGIN;
        add_header X-Content-Type-Options nosniff;
        add_header X-XSS-Protection "1; mode=block";


        server {
                server_name  localhost;
                listen 80 default_server;
                listen [::]:80 default_server;

                location @proxy_to_app {
                        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                        proxy_set_header X-Forwarded-Proto https;
                        proxy_set_header X-Real-IP $remote_addr;
                        proxy_set_header Host $http_host;
                        # we don't want nginx trying to do something clever with
                        # redirects, we set the Host: header above already.
                        proxy_redirect off;
                        proxy_pass http://app_server;
                }

                location / {
                        try_files  $uri $uri.html $uri/ $uri/index.html index.html @proxy_to_app;
                }
        }
}





